#ifndef Event_h
#define Event_h

#include "CaloSimulation.h"
#include "TH1F.h"
#include "TH2F.h"

/**
 * \class Event class.
 * @details This class describes an event.
 */
class Event {

private:
    int                     m_eventNumber ;   ///< event number.
    float                   m_eTrue ;         ///< true energy.
    float                   m_eReco ;         ///< reconstructed energy.
    float                   m_eRecoBias ;     ///< bias reconstruction energy.
    float                   m_xTrue;          ///< true x coordinate of impact point
    float                   m_yTrue;          ///< true y coordinate of impact point
    float                   m_xReco;          ///< reconstructed x coordinate of impact point
    float                   m_yReco;          ///< reconstructed y coordinate of impact point
    CaloSimulation::CalData m_caldata;        ///< calorimeter data map.
    TH1F*                   m_histZ;          ///< layers energy histogram.
    TH2F*                   m_histXY;         ///< transverse energy histogram.


public:

    //! Default constructor
    Event();

    //! Destructor
    virtual ~Event();

    //! initialize
    /*!
        \param eventNumber integer: number of particule arriving in the calorimeter
    */
    void build(int eventNumber);


    // setters
    //! Set the initial number of event
    void setEventNumber(int eventNumber) { m_eventNumber = eventNumber; }
    //! Set the true deposited energy in the calorimeter
    void seteTrue(float eTrue) { m_eTrue = eTrue; }
    //! Set the energy reconstructed by the calorimeter
    void seteReco(float eReco) { m_eReco = eReco; }
    //! Set the bias in the reconstructed energy
    void seteRecoBias(float eRecoBias) { m_eRecoBias = eRecoBias; }
    //! Set the true value of the impact position in x
    void setxTrue(float xTrue) { m_xTrue = xTrue; }
    //! Set the true value of the impact position in y
    void setyTrue(float yTrue) { m_yTrue = yTrue; }
    //! Set the impact position reconstructed in x
    void setxReco(float xReco) { m_xReco = xReco; }
    //! Set the impact position reconstructed in y
    void setyReco(float yReco) { m_yReco = yReco; }
    //! Set the map (object of type : CaloData) with caracteristic of
    //! all cells
    /*!
        \param caldata: object of type CalData
        \sa CaloSimulation
        \sa CalData
    */
    void setCalData(CaloSimulation::CalData caldata) { m_caldata = caldata; }
    //! Set the histogram fill with the energy in Z axis
    void setHistZ(TH1F* histZ) { m_histZ = histZ; }
    //! Set Set the histogram fill with the energy in XY axis
    void setHistXY(TH2F* histXY) { m_histXY = histXY; }

    // getters
    //! Get the initial number of event
    int    eventNumber()              const { return m_eventNumber; }
    //! Get the energy value generated by the shower
    float  eTrue()                    const { return m_eTrue; }
    //! Get the energy reconstructed by the calorimeter
    float  eReco()                    const { return m_eReco; }
    //! Get the bias in the reconstructed energy
    float  eRecoBias()                const { return m_eRecoBias; }
    //! Get the true value of the impact position in x
    float  xTrue()                    const { return m_xTrue; }
    //! Get the true value of the impact position in y
    float  yTrue()                    const { return m_yTrue; }
    //! Get the impact position reconstructed in x
    float  xReco()                    const { return m_xReco; }
    //! Get the impact position reconstructed in y
    float  yReco()                    const { return m_yReco; }
    /*!
        Get the map (object of type : CaloData) with caracteristic of all cells
        \sa CalData
    */
    CaloSimulation::CalData calData() const { return m_caldata; }
    //! Get the histogram fill with the energy in Z axis
    TH1F*  histZ()                    const { return m_histZ; }
    //! Get Set the histogram fill with the energy in XY axis
    TH2F*  histXY()                   const { return m_histXY; }
};

#endif
